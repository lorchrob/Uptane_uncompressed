package Agree_Nodes
public
	with Data_Types;
	
	annex agree {**
			
		-- HasHappened(X) is true iff X has been true at least once so far
		node HasHappened(X : bool) returns (Y : bool);
		let
  			Y = X or (false -> pre (Y)) ;
		tel;

		-- Initially(X) is true iff X was true at the initial step
		node InitiallyX(X: bool) returns (Y: bool);
		let
  			Y = X -> true;
		tel;
		
		node Duration(p: bool) returns (r: int) ;
		let   
			r = (if p then 1 else 0) -> (if p then pre(r) + 1 else 0) ;
		tel;
		
		node Sofar(X : bool ) returns ( Y : bool );
		let
 			Y = X -> (X and (pre(Y)));
		tel;
		
		node Since(X: bool, Y : bool ) returns (Z : bool);
		let
  			Z =  X or (Y and (false -> pre(Z)));
		tel;
		
		node ToInt(b: bool) returns (i: int);
		let
			i = if b then 1 else 0;
		tel;
		
		-- Bogus/abstract predicates
		node Match(X: int, Z: int) returns (B: bool);
		let
			B = (X = Z);
		tel;

		node Compatible(X: int, Y: int) returns (Z: bool);
		let
			Z = Y - 5 <= X and X <= Y + 5;
		tel;

		node Compatible3(X: int, Y: int, Z: int) returns (o: bool);
		let
			o = (0 <= X + Y + Z) and (X + Y + Z < 10);
		tel;

		node AuthoredByOem(X: int) returns (Z: bool);
		let
			Z = (X >= 0);
		tel;

		node AuthoredByEcu(X: Data_Types::VehicleVersionManifest.impl) returns (Z: bool);
		let
			 Z = (X.report_one.image_length >= 100);
		tel;

		node HashImg(X: Data_Types::Image.impl) returns (Y: int);
		let
			Y = X.filename;
		tel;

		node HashMan(X: Data_Types::VehicleVersionManifest.impl) returns (Y: int);
		let
			Y = X.signature_key;
		tel;

		node HashVRep(X: Data_Types::EcuVersionReport.impl) returns (Y: int);
		let
			Y = X.signature_key;
		tel;

		node HashRoot(X: Data_Types::RootMetadata.impl) returns (Y: int);
		let
			Y = X.common_payload.filename;
		tel;

		node HashTimestamp(X: Data_Types::TimestampMetadata.impl) returns (Y: int);
		let
			Y = X.common_payload.filename;
		tel;

		node HashSnapshot(X: Data_Types::SnapshotMetadata.impl) returns (Y: int);
		let
			Y = X.common_payload.filename;
		tel;

		node HashTargets(X: Data_Types::TargetsMetadata.impl) returns (Y: int);
		let
			Y = X.common_payload.filename;
		tel;

		node TargetsPriMatchImg(M: Data_Types::TargetsMetadata.impl, I1: Data_Types::Image.impl, I2: Data_Types::Image.impl, I3: Data_Types::Image.impl, I4: Data_Types::Image.impl, I5: Data_Types::Image.impl) returns (B: bool);
		let
			B = (
				(M.release_counters.release_counter_one = I1.version and M.image_filenames.filename_one = I1.filename and M.image_hashes.hash_one = HashImg(I1)) or
				(M.release_counters.release_counter_one = I2.version and M.image_filenames.filename_one = I2.filename and M.image_hashes.hash_one = HashImg(I2)) or
				(M.release_counters.release_counter_one = I3.version and M.image_filenames.filename_one = I3.filename and M.image_hashes.hash_one = HashImg(I3)) or
				(M.release_counters.release_counter_one = I4.version and M.image_filenames.filename_one = I4.filename and M.image_hashes.hash_one = HashImg(I4)) or
				(M.release_counters.release_counter_one = I5.version and M.image_filenames.filename_one = I5.filename and M.image_hashes.hash_one = HashImg(I5))
			);
		tel;

		node TargetsSecMatchImg(M: Data_Types::TargetsMetadata.impl, I1: Data_Types::Image.impl, I2: Data_Types::Image.impl, I3: Data_Types::Image.impl, I4: Data_Types::Image.impl, I5: Data_Types::Image.impl) returns (B: bool);
		let
			B = (
				(M.release_counters.release_counter_two = I1.version and M.image_filenames.filename_two = I1.filename and M.image_hashes.hash_two = HashImg(I1)) or
				(M.release_counters.release_counter_two = I2.version and M.image_filenames.filename_two = I2.filename and M.image_hashes.hash_two = HashImg(I2)) or
				(M.release_counters.release_counter_two = I3.version and M.image_filenames.filename_two = I3.filename and M.image_hashes.hash_two = HashImg(I3)) or
				(M.release_counters.release_counter_two = I4.version and M.image_filenames.filename_two = I4.filename and M.image_hashes.hash_two = HashImg(I4)) or
				(M.release_counters.release_counter_two = I5.version and M.image_filenames.filename_two = I5.filename and M.image_hashes.hash_two = HashImg(I5))
			);
		tel;

		node TargetsSec2MatchImg(M: Data_Types::TargetsMetadata.impl, I1: Data_Types::Image.impl, I2: Data_Types::Image.impl, I3: Data_Types::Image.impl, I4: Data_Types::Image.impl, I5: Data_Types::Image.impl) returns (B: bool);
		let
			B = (
				(M.release_counters.release_counter_three = I1.version and M.image_filenames.filename_three = I1.filename and M.image_hashes.hash_three = HashImg(I1)) or
				(M.release_counters.release_counter_three = I2.version and M.image_filenames.filename_three = I2.filename and M.image_hashes.hash_three = HashImg(I2)) or
				(M.release_counters.release_counter_three = I3.version and M.image_filenames.filename_three = I3.filename and M.image_hashes.hash_three = HashImg(I3)) or
				(M.release_counters.release_counter_three = I4.version and M.image_filenames.filename_three = I4.filename and M.image_hashes.hash_three = HashImg(I4)) or
				(M.release_counters.release_counter_three = I5.version and M.image_filenames.filename_three = I5.filename and M.image_hashes.hash_three = HashImg(I5))
			);
		tel; 

		node TargetsMatch(M1: Data_Types::TargetsMetadata.impl, M2: Data_Types::TargetsMetadataImg.impl, opt_flag: bool) returns (B: bool);
		let
			B = (
						-- M1 first image matches with at least one image in M2
						(
							(M1.image_filenames.filename_one = M2.image_filenames.filename_one and M1.image_hashes.hash_one = M2.image_hashes.hash_one and (opt_flag => (M1.release_counters.release_counter_one = M2.release_counters.release_counter_one)) and M1.hardware_ids.hardware_id_one = M2.hardware_ids.hardware_id_one) or
							(M1.image_filenames.filename_one = M2.image_filenames.filename_two and M1.image_hashes.hash_one = M2.image_hashes.hash_two and (opt_flag => (M1.release_counters.release_counter_one = M2.release_counters.release_counter_two)) and M1.hardware_ids.hardware_id_one = M2.hardware_ids.hardware_id_two) or
							(M1.image_filenames.filename_one = M2.image_filenames.filename_three and M1.image_hashes.hash_one = M2.image_hashes.hash_three and (opt_flag => (M1.release_counters.release_counter_one = M2.release_counters.release_counter_three)) and M1.hardware_ids.hardware_id_one = M2.hardware_ids.hardware_id_three) or
							(M1.image_filenames.filename_one = M2.image_filenames.filename_four and M1.image_hashes.hash_one = M2.image_hashes.hash_four and (opt_flag => (M1.release_counters.release_counter_one = M2.release_counters.release_counter_four)) and M1.hardware_ids.hardware_id_one = M2.hardware_ids.hardware_id_four) or
							(M1.image_filenames.filename_one = M2.image_filenames.filename_five and M1.image_hashes.hash_one = M2.image_hashes.hash_five and (opt_flag => (M1.release_counters.release_counter_one = M2.release_counters.release_counter_five)) and M1.hardware_ids.hardware_id_one = M2.hardware_ids.hardware_id_five)
						) and
						-- M1 second image matches with at least one image in M2
						(
							(M1.image_filenames.filename_two = M2.image_filenames.filename_one and M1.image_hashes.hash_two = M2.image_hashes.hash_one and (opt_flag => (M1.release_counters.release_counter_two = M2.release_counters.release_counter_one)) and M1.hardware_ids.hardware_id_two = M2.hardware_ids.hardware_id_one) or
							(M1.image_filenames.filename_two = M2.image_filenames.filename_two and M1.image_hashes.hash_two = M2.image_hashes.hash_two and (opt_flag => (M1.release_counters.release_counter_two = M2.release_counters.release_counter_two)) and M1.hardware_ids.hardware_id_two = M2.hardware_ids.hardware_id_two) or
							(M1.image_filenames.filename_two = M2.image_filenames.filename_three and M1.image_hashes.hash_two = M2.image_hashes.hash_three and (opt_flag => (M1.release_counters.release_counter_two = M2.release_counters.release_counter_three)) and M1.hardware_ids.hardware_id_two = M2.hardware_ids.hardware_id_three) or
							(M1.image_filenames.filename_two = M2.image_filenames.filename_four and M1.image_hashes.hash_two = M2.image_hashes.hash_four and (opt_flag => (M1.release_counters.release_counter_two = M2.release_counters.release_counter_four)) and M1.hardware_ids.hardware_id_two = M2.hardware_ids.hardware_id_four) or
							(M1.image_filenames.filename_two = M2.image_filenames.filename_five and M1.image_hashes.hash_two = M2.image_hashes.hash_five and (opt_flag => (M1.release_counters.release_counter_two = M2.release_counters.release_counter_five)) and M1.hardware_ids.hardware_id_two = M2.hardware_ids.hardware_id_five)
						) and
						-- M1 third image matches with at least one image in M2
						(
							(M1.image_filenames.filename_three = M2.image_filenames.filename_one and M1.image_hashes.hash_three = M2.image_hashes.hash_one and (opt_flag => (M1.release_counters.release_counter_three = M2.release_counters.release_counter_one)) and M1.hardware_ids.hardware_id_three = M2.hardware_ids.hardware_id_one) or
							(M1.image_filenames.filename_three = M2.image_filenames.filename_two and M1.image_hashes.hash_three = M2.image_hashes.hash_two and (opt_flag => (M1.release_counters.release_counter_three = M2.release_counters.release_counter_two)) and M1.hardware_ids.hardware_id_three = M2.hardware_ids.hardware_id_two) or
							(M1.image_filenames.filename_three = M2.image_filenames.filename_three and M1.image_hashes.hash_three = M2.image_hashes.hash_three and (opt_flag => (M1.release_counters.release_counter_three = M2.release_counters.release_counter_three)) and M1.hardware_ids.hardware_id_three = M2.hardware_ids.hardware_id_three) or
							(M1.image_filenames.filename_three = M2.image_filenames.filename_four and M1.image_hashes.hash_three = M2.image_hashes.hash_four and (opt_flag => (M1.release_counters.release_counter_three = M2.release_counters.release_counter_four)) and M1.hardware_ids.hardware_id_three = M2.hardware_ids.hardware_id_four) or
							(M1.image_filenames.filename_three = M2.image_filenames.filename_five and M1.image_hashes.hash_three = M2.image_hashes.hash_five and (opt_flag => (M1.release_counters.release_counter_three = M2.release_counters.release_counter_five)) and M1.hardware_ids.hardware_id_three = M2.hardware_ids.hardware_id_five)
						)
					);
		tel
	**};
end Agree_Nodes;